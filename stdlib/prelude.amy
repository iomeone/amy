Maybe a = Nothing | Just a

maybe :: forall a b. b -> (a -> b) -> Maybe a -> b
maybe default f mValue =
  case mValue of
    Nothing -> default
    Just a -> f a

Either a b = Left a | Right b

either :: forall a b c. (a -> c) -> (b -> c) -> Either a b -> c
either f g e =
  case e of
    Left a -> f a
    Right b -> g b

id :: forall a. a -> a
id x = x

const :: forall a b. a -> b -> a
const x y = x
