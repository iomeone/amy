Void = Void

MyEnum = MyEnumA | MyEnumB | MyEnumC

MySum = MySumA Int | MySumB Double | MySumC

EmptyType

Nat = Zero | Suc Nat

main :: Int
main =
  let
    x :: MySum
    x = MySumB 7.8
    y :: MyEnum
    y = MyEnumB
    z = Suc (Suc Zero)
  in
    case x of
      MySumA x' -> 0
      MySumB x' -> f x' y
      MySumC -> countNat z

f :: Double -> MyEnum -> Int
f x enum =
  case enum of
    MyEnumA -> 2
    MyEnumB -> doubleToInt# x
    MyEnumC -> 3

countNat :: Nat -> Int
countNat n =
  case n of
    Zero -> 0
    Suc n' -> iAdd# 1 (countNat n')